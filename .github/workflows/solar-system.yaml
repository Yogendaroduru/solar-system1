name: Solar system-workflow
on: 
  workflow_dispatch:
  push:
    branches:
    - main
    - 'feature/*'
env:
    MONGO_URL: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        container:
            image: node:18
        services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              ports:
                - 27017:27017
        env:
            MONGO_URL: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Cache NPM Dependencies
              uses: actions/cache@v4
              with:
                 path: node_modules
                 key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}    

            - name: Install Dependency and Unit Testing
              run: |
                   npm install
                   env | grep MONGO
            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test
            - name: Archive Test Result
              if: always()     
              uses: actions/upload-artifact@v4
              with:
                name: Mocha-Test-Result-18-linux
                path: test-results.xml
    code-coverage:
        name: Code Coverage
        container:
            image: node:18
        services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              options:
                  --name mongo
        env:
            MONGO_URL: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Cache NPM Dependencies
              uses: actions/cache@v4
              with:
                 path: node_modules
                 key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install Dependency
              run: npm install
            - name: Code Coverage
              continue-on-error: true
              run: npm run coverage
            - name: Archive Test Result
              uses: actions/upload-artifact@v4
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 1
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions:
             packages: write
        runs-on: ubuntu-latest
        steps:
            - name: Checkout 
              uses: actions/checkout@v4
            - name: Dockerhub Login
              uses: docker/login-action@v3
              with:
                  username: ${{ vars.username }} 
                  password: ${{ secrets.password }}

            - name: GHCR Login
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }} 
                  password: ${{ secrets.GITHUB_TOKEN }}     
                  
            - name: Docker Build and Test
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: false
                  tags: ${{ vars.username }}/solar-system:${{ github.sha }}
            - name: Docker Image Testing
              run: |
                docker images
                docker run --name solar-system-app -d \
                   -p 3000:3000 \
                   -e MONGO_URL=$MONGO_URL \
                   -e MONGO_USERNAME=$MONGO_USERNAME \
                   -e MONGO_PASSWORD=$MONGO_PASSWORD \
                   ${{ vars.username }}/solar-system:${{ github.sha }}

                echo "Waiting for the app to start..."
                for i in {1..10}; do
                    if wget -qO- 127.0.0.1:3000/live | grep live; then
                      echo "App is live!"
                      break
                    else
                      echo "Waiting... ($i)"
                      sleep 3
                    fi
                done
            - name: GHCR Push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: |
                      ${{ vars.username }}/solar-system:${{ github.sha }}
                      ghcr.io/yogendaroduru/solar-system:${{ github.sha }}
    dev-deploy:
        name: Deployment on K8S
        needs: docker
        runs-on: ubuntu-latest
        steps:
            - name: Checkout 
              uses: actions/checkout@v4
            - name: Cache Minikube
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.minikube
                      ~/.kube
                  key: minikube-${{ runner.os }}-${{ github.ref_name }}
                  restore-keys: |
                      minikube-${{ runner.os }}-
            - name: Install kubectl CLI
              uses: azure/setup-kubectl@v4
              with:
                  version: 'v1.24.3' 
            - name: Start Minikube
              id: minikube
              uses: hiberbee/github-action-minikube@latest
              with:
                  profile: github
                  driver: docker

            - name: Get Minikube status
              run: minikube status

            - name: Get Kubernetes pods
              run: |
                   kubectl get nodes
                   kubectl get pods -A
            - name: Enable Ingress Controller
              run: minikube addons enable ingress
              
            - name: Wait for Ingress Controller to be ready
              run: |
                    echo "Waiting for ingress-nginx-controller pod to be ready..."
                    kubectl rollout status deployment ingress-nginx-controller -n ingress-nginx --timeout=50s

            - name: Save Nginx Ingress Controller IP as a Github Environment Variable
              run: | 
                   INGRESS_IP=$(minikube ip)
                   env | grep INGRESS_IP

#            - name: Replace Token
#              uses: cschleiden/replace-tokens@v1
#              with:
#                  files: '["kubernetes/development/*.yaml"]'
#              env:
#                  NAMESPACE: ${{ vars.NAMESPACE }}
#                  REPLICAS: ${{ vars.REPLICAS }}
#                  IK8S_IMAGE: ${{ vars.USERNAME }}/solar-system:${{ github.sha }}
         

                                                         

              


    

            
            
            

